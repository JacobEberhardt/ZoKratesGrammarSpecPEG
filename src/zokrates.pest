/** 
* ZoKrates Grammar
* Author: Jacob Eberhardt
*/

// TODO: 
// exclude language keywords as identifiers
// Ignore linebreak after \
// Doc: associativity and precedence table for operators

file = { SOI ~ import_directive* ~ program ~ EOI }
import_directive = {"import" ~ ANY* ~ ("as" ~ identifier)? ~ NEWLINE+}
program = {function_definition+}
function_definition = {"def" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ "->" ~ "(" ~ type_list? ~ ")" ~ ":" ~ NEWLINE* ~ statement+ }

parameter_list = {parameter ~ ("," ~ parameter)*}
parameter = {"private"? ~ type_name ~ identifier}
type_name = @{"field" ~ ("[" ~ WHITESPACE* ~ expression ~ WHITESPACE* ~ "]")* | "bool" ~ ("[" ~ WHITESPACE* ~ "]")* }

type_list = { type_name ~ ("," ~ type_name)*}

// Statements 
statement = { (return_statement // does not require subsequent newline
              | (iteration_statement
                | multi_assignment_statement
                | definition_statement
                | assignment_statement
                | expression_statement 
                ) ~ NEWLINE 
            ) ~ NEWLINE* }

iteration_statement = { "for" ~ type_name ~ identifier ~ "in" ~ constant ~ ".." ~ constant ~ "do" ~ NEWLINE* ~ statement* ~ "endfor"}
return_statement = { "return" ~ expression_list}
multi_assignment_statement = { assignee_list ~ "=" ~ postfix_expression ~ "(" ~ expression_list? ~ ")"} // This is very specific with regards to parsing. However, I think more generality is not needed here.
definition_statement = {type_name ~ identifier ~ "=" ~ expression}
assignment_statement = {identifier ~ ("[" ~ (constant | identifier)? ~ "]")* ~ "=" ~ expression } // TODO: Is this optimal? Can the left side be written more elegantly?
expression_statement = {expression}

assignee_list = { type_name? ~ identifier ~ ("," ~ type_name? ~ identifier)*} // declarations or assignments

// Expressions
expression_list = {expression ~ ("," ~ expression)*}
expression = {inclusive_or_expression }// includes all logical and arithmetic rules. Acts as wrapper at top of hierarchy.

inclusive_or_expression = { exclusive_or_expression ~ ( "|" ~ exclusive_or_expression)* }
exclusive_or_expression = { and_expression ~ ( "^" ~ and_expression)* }
and_expression = { equality_expression ~ ( "&" ~ equality_expression)* }  
equality_expression = { relational_expression ~ (("=="|"!=") ~ relational_expression)* }    
relational_expression = { additive_expression ~ (("<"|">"|"<="|">=") ~ additive_expression)* }
additive_expression = { multiplicative_expression ~ (("+"|"-") ~ multiplicative_expression)* }
multiplicative_expression = { power_expression ~ (("*"|"/") ~ power_expression)* }
power_expression = { unary_expression ~ ("**" ~ unary_expression)* } 
unary_expression = { "!"* ~ ( postfix_expression | conditional_expression ) }
conditional_expression = { "if" ~ expression ~ "then" ~ expression ~ "else" ~ expression ~ "fi"}
postfix_expression = { primary_expression ~ ("[" ~ expression ~ "]" | "(" ~ expression_list? ~ ")")* } 
primary_expression = { identifier
                    | constant
                    | "(" ~ expression ~ ")"
                    | "[" ~ expression_list ~ "]" //special case for array initialization
                    }
// End Expressions

// identifier = @{ !keyword ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*}
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*}
constant = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

WHITESPACE = _{ " " | "\t" | "\\" ~ NEWLINE}
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ ( !NEWLINE ~ ANY)* ~ NEWLINE) }

// TODO: Order by alphabet
// keyword = @{"for" | "as" | "in" | "return" | "byte" | "field" |
//             "const" | "if" | "do" | "else" | "export" | "false" |
//             "def" | "for" | "import" | "uint" |
//             "in" | "public" | "private" | "return" |
//             "struct" | "true"
//             }